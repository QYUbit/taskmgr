import React from 'react';
import { Alert, StyleSheet, Switch, Text, TouchableOpacity, View } from 'react-native';
import { useMaintenanceOperations } from '../../hooks/useMaintenance';
import { useSettings } from '../../hooks/useSettings';

export default function SettingsScreen() {
  const { settings, updateSetting, loading } = useSettings();
  const { cleanupOldEvents, generateEventsForNextWeeks, loading: maintenanceLoading } = useMaintenanceOperations();

  const handleCleanupOldEvents = async () => {
    Alert.alert(
      'Cleanup Old Events',
      `This will delete all events older than ${settings.keepEventsDays} days. Continue?`,
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Cleanup',
          onPress: async () => {
            try {
              await cleanupOldEvents(settings.keepEventsDays);
              Alert.alert('Success', 'Old events have been cleaned up!');
            } catch (error) {
              Alert.alert('Error', 'Failed to cleanup events');
            }
          }
        }
      ]
    );
  };

  const handleGenerateEvents = async () => {
    try {
      await generateEventsForNextWeeks(settings.autoGenerateDaysAhead);
      Alert.alert('Success', `Events generated for next ${settings.autoGenerateDaysAhead} days!`);
    } catch (error) {
      Alert.alert('Error', 'Failed to generate events');
    }
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <Text>Loading settings...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.sectionHeader}>Display</Text>
      
      <View style={styles.settingItem}>
        <Text style={styles.settingLabel}>Show Ghost Events</Text>
        <Switch
          value={settings.showGhostEvents}
          onValueChange={(value) => updateSetting('showGhostEvents', value)}
        />
      </View>

      <View style={styles.settingItem}>
        <Text style={styles.settingLabel}>Theme</Text>
        <Text style={styles.settingValue}>Not Implemented yet</Text>
      </View>

      <Text style={styles.sectionHeader}>Automation</Text>
      
      <View style={styles.settingItem}>
        <Text style={styles.settingLabel}>Auto-generate Events</Text>
        <Switch
          value={settings.autoGenerateEvents}
          onValueChange={(value) => updateSetting('autoGenerateEvents', value)}
        />
      </View>

      <View style={styles.settingItem}>
        <Text style={styles.settingLabel}>Generate {settings.autoGenerateDaysAhead} days ahead</Text>
        <TouchableOpacity onPress={() => {/* Open number picker */}}>
          <Text style={styles.settingValue}>Change</Text>
        </TouchableOpacity>
      </View>

      <View style={styles.settingItem}>
        <Text style={styles.settingLabel}>Auto-cleanup old Events</Text>
        <Switch
          value={settings.autoCleanupOldEvents}
          onValueChange={(value) => updateSetting('autoCleanupOldEvents', value)}
        />
      </View>

      <Text style={styles.sectionHeader}>Manual Actions</Text>
      
      <TouchableOpacity 
        style={[styles.actionButton, maintenanceLoading && styles.disabledButton]}
        onPress={handleGenerateEvents}
        disabled={maintenanceLoading}
      >
        <Text style={styles.actionButtonText}>
          {maintenanceLoading ? 'Generating...' : 'Generate Events Now'}
        </Text>
      </TouchableOpacity>

      <TouchableOpacity 
        style={[styles.actionButton, styles.dangerButton, maintenanceLoading && styles.disabledButton]}
        onPress={handleCleanupOldEvents}
        disabled={maintenanceLoading}
      >
        <Text style={styles.actionButtonText}>
          {maintenanceLoading ? 'Cleaning...' : 'Cleanup Old Events'}
        </Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#fff',
  },
  sectionHeader: {
    fontSize: 18,
    fontWeight: 'bold',
    marginTop: 24,
    marginBottom: 12,
  },
  settingItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  settingLabel: {
    fontSize: 16,
  },
  settingValue: {
    fontSize: 16,
    color: '#007AFF',
  },
  actionButton: {
    backgroundColor: '#007AFF',
    padding: 16,
    borderRadius: 8,
    marginTop: 12,
  },
  dangerButton: {
    backgroundColor: '#FF3B30',
  },
  disabledButton: {
    opacity: 0.6,
  },
  actionButtonText: {
    color: 'white',
    textAlign: 'center',
    fontSize: 16,
    fontWeight: 'bold',
  },
});