import NumberInput from '@/components/settings/NumberInput';
import Picker, { PickerRef } from '@/components/settings/Picker';
import SettingRow from '@/components/settings/SettingsView';
import Spinner from '@/components/ui/Spinner';
import { useSettings } from '@/hooks/useSettings';
import { useTheme } from '@/hooks/useTheme';
import { useFocusEffect } from 'expo-router';
import React, { useCallback, useRef } from 'react';
import { ScrollView, StyleSheet, Switch, Text, View } from 'react-native';

export default function SettingsRoute() {
  const { settings, updateSetting, loading } = useSettings();
  const theme = useTheme();

  const weekStartPickerRef = useRef<PickerRef>(null);

  useFocusEffect(
    useCallback(() => {
      return () => {
        weekStartPickerRef.current?.close()
      }
    }, [])
  )

  if (loading) {
    return <Spinner theme={theme} />
  }

  return (
    <View style={styles.container}>
      <View style={[styles.header, { backgroundColor: theme.surface, borderBottomColor: theme.border }]}>
        <View style={styles.headerContent}>
          <Text style={[styles.headline, { color: theme.text }]}>
            App Settings
          </Text>
        </View>
      </View>
      <ScrollView
        style={[{ backgroundColor: theme.background }]}
        contentContainerStyle={styles.scrollContent}
      >
        <Text style={[styles.sectionTitle, { color: theme.text }]}>Calendar Settings</Text>

        <SettingRow title="Auto-generate events" theme={theme}>
          <Switch
            value={settings.autoGenerateEvents}
            onValueChange={(value) => updateSetting('autoGenerateEvents', value)}
            trackColor={{ false: theme.border, true: theme.primary }}
            thumbColor={theme.surface}
          />
        </SettingRow>

        {settings.autoGenerateEvents && (
          <SettingRow title="Generate days ahead" theme={theme}>
            <NumberInput
              value={settings.autoGenerateDaysAhead}
              onChange={(value) => updateSetting('autoGenerateDaysAhead', value)}
              min={1}
              max={7}
              theme={theme}
            />
          </SettingRow>
        )}

        <SettingRow title="Auto-cleanup old events" theme={theme}>
          <Switch
            value={settings.autoCleanupOldEvents}
            onValueChange={(value) => updateSetting('autoCleanupOldEvents', value)}
            trackColor={{ false: theme.border, true: theme.primary }}
            thumbColor={theme.surface}
          />
        </SettingRow>

        {settings.autoCleanupOldEvents && (
          <SettingRow title="Keep events for (days)" theme={theme}>
            <NumberInput
              value={settings.keepEventsDays}
              onChange={(value) => updateSetting('keepEventsDays', value)}
              min={7}
              max={90}
              theme={theme}
            />
          </SettingRow>
        )}

        <SettingRow title="Default event duration (minutes)" theme={theme}>
          <NumberInput
            value={settings.defaultEventDuration}
            onChange={(value) => updateSetting('defaultEventDuration', value)}
            min={15}
            max={180}
            step={15}
            theme={theme}
          />
        </SettingRow>
        
        <SettingRow title="Week starts on" theme={theme}>
          <Picker
            options={[
              { label: 'Sunday', value: 0 as (0 | 1) },
              { label: 'Monday', value: 1 as (0 | 1) }
            ]}
            selectedValue={settings.weekStartsOn}
            onValueChange={(value: any) => updateSetting('weekStartsOn', value)}
            theme={theme}
            ref={weekStartPickerRef}
          />
        </SettingRow>

        <Text style={[styles.sectionTitle, { color: theme.text, marginTop: 24 }]}>
          Notifications
        </Text>

        <SettingRow title="Enable notifications" theme={theme}>
          <Switch
            value={settings.notificationsEnabled}
            onValueChange={(value) => updateSetting('notificationsEnabled', value)}
            trackColor={{ false: theme.border, true: theme.primary }}
            thumbColor={theme.surface}
          />
        </SettingRow>

        {settings.notificationsEnabled && (
          <SettingRow title="Default notification time (minutes)" theme={theme}>
            <NumberInput
              value={settings.defaultNotificationMinutes}
              onChange={(value) => updateSetting('defaultNotificationMinutes', value)}
              min={5}
              max={60}
              step={5}
              theme={theme}
            />
          </SettingRow>
        )}

        <Text style={[styles.sectionTitle, { color: theme.text, marginTop: 24 }]}>
          Display Options
        </Text>

        <SettingRow
          title="Show ghost events"
          description="Display future automated events transparently"
          theme={theme}
        >
          <Switch
            value={settings.showGhostEvents}
            onValueChange={(value) => updateSetting('showGhostEvents', value)}
            trackColor={{ false: theme.border, true: theme.primary }}
            thumbColor={theme.surface}
          />
        </SettingRow>

        <SettingRow
          title="Show current time"
          description="Display a line with the current time"
          theme={theme}
        >
          <Switch
            value={settings.showCurrentTime}
            onValueChange={(value) => updateSetting('showCurrentTime', value)}
            trackColor={{ false: theme.border, true: theme.primary }}
            thumbColor={theme.surface}
          />
        </SettingRow>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    borderBottomWidth: 1,
    paddingTop: 35,
    paddingBottom: 16,
    paddingHorizontal: 20,
  },
  headerContent: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  headline: {
    fontSize: 18,
    fontWeight: 'bold',
    flex: 1,
  },
  scrollContent: {
    padding: 16,
    paddingBottom: 32,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 12,
  },
});
