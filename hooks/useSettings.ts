import AsyncStorage from '@react-native-async-storage/async-storage';
import { useEffect, useState } from 'react';

const SETTINGS_KEY = 'app_settings';

interface AppSettings {
  autoGenerateEvents: boolean;
  autoGenerateDaysAhead: number; // Unused
  autoCleanupOldEvents: boolean;
  keepEventsDays: number;
  defaultEventDuration: number; //
  weekStartsOn: 0 | 1; 
  notificationsEnabled: boolean; // Soon
  defaultNotificationMinutes: number; // Soon
  showGhostEvents: boolean; //
  showCurrentTime: boolean; //
  lastEventJob?: string;
}

const DEFAULT_SETTINGS: AppSettings = {
  autoGenerateEvents: true,
  autoGenerateDaysAhead: 2,
  autoCleanupOldEvents: true,
  keepEventsDays: 30,
  defaultEventDuration: 60,
  weekStartsOn: 1,
  notificationsEnabled: true,
  defaultNotificationMinutes: 15,
  showGhostEvents: true,
  showCurrentTime: true,
};

export const useSettings = () => {
  const [settings, setSettings] = useState<AppSettings>(DEFAULT_SETTINGS);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadSettings();
  }, [settings]);

  const loadSettings = async () => {
    try {
      const stored = await AsyncStorage.getItem(SETTINGS_KEY);
      if (stored) {
        setSettings({ ...DEFAULT_SETTINGS, ...JSON.parse(stored) });
      }
    } catch (error) {
      console.error('Failed to load settings:', error);
    } finally {
      setLoading(false);
    }
  };

  const updateSetting = async <K extends keyof AppSettings>(
    key: K,
    value: AppSettings[K]
  ) => {
    const newSettings = { ...settings, [key]: value };
    setSettings(newSettings);
    try {
      await AsyncStorage.setItem(SETTINGS_KEY, JSON.stringify(newSettings));
    } catch (error) {
      console.error('Failed to save settings:', error);
      setSettings(settings);
    }
  };

  return { settings, updateSetting, loading };
};
